// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const actualizarUsuario = `-- name: ActualizarUsuario :exec
UPDATE usuarios
SET DNI = $2, nombre = $3, apellido = $4, email = $5, telefono = $6, fecha_nacimiento = $7, sexo = $8, rol = $9
WHERE id = $1
`

type ActualizarUsuarioParams struct {
	ID              int32     `json:"id"`
	Dni             string    `json:"dni"`
	Nombre          string    `json:"nombre"`
	Apellido        string    `json:"apellido"`
	Email           string    `json:"email"`
	Telefono        string    `json:"telefono"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Sexo            string    `json:"sexo"`
	Rol             string    `json:"rol"`
}

func (q *Queries) ActualizarUsuario(ctx context.Context, arg ActualizarUsuarioParams) error {
	_, err := q.db.ExecContext(ctx, actualizarUsuario,
		arg.ID,
		arg.Dni,
		arg.Nombre,
		arg.Apellido,
		arg.Email,
		arg.Telefono,
		arg.FechaNacimiento,
		arg.Sexo,
		arg.Rol,
	)
	return err
}

const crearUsuario = `-- name: CrearUsuario :one
INSERT INTO usuarios (DNI, nombre, apellido, email, telefono, fecha_nacimiento, sexo, rol)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, DNI, nombre, apellido, email, telefono, fecha_nacimiento, sexo, rol
`

type CrearUsuarioParams struct {
	Dni             string    `json:"dni"`
	Nombre          string    `json:"nombre"`
	Apellido        string    `json:"apellido"`
	Email           string    `json:"email"`
	Telefono        string    `json:"telefono"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Sexo            string    `json:"sexo"`
	Rol             string    `json:"rol"`
}

type CrearUsuarioRow struct {
	ID              int32     `json:"id"`
	Dni             string    `json:"dni"`
	Nombre          string    `json:"nombre"`
	Apellido        string    `json:"apellido"`
	Email           string    `json:"email"`
	Telefono        string    `json:"telefono"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Sexo            string    `json:"sexo"`
	Rol             string    `json:"rol"`
}

func (q *Queries) CrearUsuario(ctx context.Context, arg CrearUsuarioParams) (CrearUsuarioRow, error) {
	row := q.db.QueryRowContext(ctx, crearUsuario,
		arg.Dni,
		arg.Nombre,
		arg.Apellido,
		arg.Email,
		arg.Telefono,
		arg.FechaNacimiento,
		arg.Sexo,
		arg.Rol,
	)
	var i CrearUsuarioRow
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Apellido,
		&i.Email,
		&i.Telefono,
		&i.FechaNacimiento,
		&i.Sexo,
		&i.Rol,
	)
	return i, err
}

const eliminarUsuario = `-- name: EliminarUsuario :exec
DELETE FROM usuarios
WHERE id = $1
`

func (q *Queries) EliminarUsuario(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, eliminarUsuario, id)
	return err
}

const listarUsuarios = `-- name: ListarUsuarios :many
SELECT id, DNI, nombre, apellido, email, telefono, fecha_nacimiento, sexo, rol
FROM usuarios
ORDER BY nombre, apellido
`

type ListarUsuariosRow struct {
	ID              int32     `json:"id"`
	Dni             string    `json:"dni"`
	Nombre          string    `json:"nombre"`
	Apellido        string    `json:"apellido"`
	Email           string    `json:"email"`
	Telefono        string    `json:"telefono"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Sexo            string    `json:"sexo"`
	Rol             string    `json:"rol"`
}

func (q *Queries) ListarUsuarios(ctx context.Context) ([]ListarUsuariosRow, error) {
	rows, err := q.db.QueryContext(ctx, listarUsuarios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListarUsuariosRow
	for rows.Next() {
		var i ListarUsuariosRow
		if err := rows.Scan(
			&i.ID,
			&i.Dni,
			&i.Nombre,
			&i.Apellido,
			&i.Email,
			&i.Telefono,
			&i.FechaNacimiento,
			&i.Sexo,
			&i.Rol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerUsuario = `-- name: ObtenerUsuario :one
SELECT id, DNI, nombre, apellido, email, telefono, fecha_nacimiento, sexo, rol
FROM usuarios
WHERE id = $1
`

type ObtenerUsuarioRow struct {
	ID              int32     `json:"id"`
	Dni             string    `json:"dni"`
	Nombre          string    `json:"nombre"`
	Apellido        string    `json:"apellido"`
	Email           string    `json:"email"`
	Telefono        string    `json:"telefono"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Sexo            string    `json:"sexo"`
	Rol             string    `json:"rol"`
}

func (q *Queries) ObtenerUsuario(ctx context.Context, id int32) (ObtenerUsuarioRow, error) {
	row := q.db.QueryRowContext(ctx, obtenerUsuario, id)
	var i ObtenerUsuarioRow
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Apellido,
		&i.Email,
		&i.Telefono,
		&i.FechaNacimiento,
		&i.Sexo,
		&i.Rol,
	)
	return i, err
}
