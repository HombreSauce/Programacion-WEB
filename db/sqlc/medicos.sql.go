// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: medicos.sql

package db

import (
	"context"
)

const actualizarMedico = `-- name: ActualizarMedico :exec
UPDATE medicos
SET nro_matricula = $2, especialidad = $3
WHERE id_medico = $1
`

type ActualizarMedicoParams struct {
	IDMedico     int32  `json:"id_medico"`
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

func (q *Queries) ActualizarMedico(ctx context.Context, arg ActualizarMedicoParams) error {
	_, err := q.db.ExecContext(ctx, actualizarMedico, arg.IDMedico, arg.NroMatricula, arg.Especialidad)
	return err
}

const crearMedico = `-- name: CrearMedico :one
INSERT INTO medicos (id_medico, nro_matricula, especialidad)
VALUES ($1, $2, $3)
RETURNING nro_matricula, especialidad
`

type CrearMedicoParams struct {
	IDMedico     int32  `json:"id_medico"`
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

type CrearMedicoRow struct {
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

func (q *Queries) CrearMedico(ctx context.Context, arg CrearMedicoParams) (CrearMedicoRow, error) {
	row := q.db.QueryRowContext(ctx, crearMedico, arg.IDMedico, arg.NroMatricula, arg.Especialidad)
	var i CrearMedicoRow
	err := row.Scan(&i.NroMatricula, &i.Especialidad)
	return i, err
}

const eliminarMedico = `-- name: EliminarMedico :exec
DELETE FROM medicos
WHERE id_medico = $1
`

func (q *Queries) EliminarMedico(ctx context.Context, idMedico int32) error {
	_, err := q.db.ExecContext(ctx, eliminarMedico, idMedico)
	return err
}

const listarMedicos = `-- name: ListarMedicos :many
SELECT u.ID, u.DNI, u.nombre, u.apellido, m.nro_matricula, m.especialidad
FROM usuarios u JOIN medicos m ON m.id_medico = u.id
ORDER BY u.apellido, u.nombre
`

type ListarMedicosRow struct {
	ID           int32  `json:"id"`
	Dni          string `json:"dni"`
	Nombre       string `json:"nombre"`
	Apellido     string `json:"apellido"`
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

func (q *Queries) ListarMedicos(ctx context.Context) ([]ListarMedicosRow, error) {
	rows, err := q.db.QueryContext(ctx, listarMedicos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListarMedicosRow
	for rows.Next() {
		var i ListarMedicosRow
		if err := rows.Scan(
			&i.ID,
			&i.Dni,
			&i.Nombre,
			&i.Apellido,
			&i.NroMatricula,
			&i.Especialidad,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerMedico = `-- name: ObtenerMedico :one
SELECT u.ID, u.DNI, u.nombre, u.apellido, m.nro_matricula, m.especialidad
FROM usuarios u JOIN medicos m ON m.id_medico = u.id
WHERE id_medico = $1
`

type ObtenerMedicoRow struct {
	ID           int32  `json:"id"`
	Dni          string `json:"dni"`
	Nombre       string `json:"nombre"`
	Apellido     string `json:"apellido"`
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

func (q *Queries) ObtenerMedico(ctx context.Context, idMedico int32) (ObtenerMedicoRow, error) {
	row := q.db.QueryRowContext(ctx, obtenerMedico, idMedico)
	var i ObtenerMedicoRow
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Apellido,
		&i.NroMatricula,
		&i.Especialidad,
	)
	return i, err
}
