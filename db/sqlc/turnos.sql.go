// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: turnos.sql

package db

import (
	"context"
	"time"
)

const actualizarTurnoDatos = `-- name: ActualizarTurnoDatos :exec
UPDATE turnos
SET id_medico = $2,
    id_paciente = $3,
    fecha = $4,
    hora = $5
WHERE id_turno = $1
`

type ActualizarTurnoDatosParams struct {
	IDTurno    int32     `json:"id_turno"`
	IDMedico   int32     `json:"id_medico"`
	IDPaciente int32     `json:"id_paciente"`
	Fecha      time.Time `json:"fecha"`
	Hora       time.Time `json:"hora"`
}

func (q *Queries) ActualizarTurnoDatos(ctx context.Context, arg ActualizarTurnoDatosParams) error {
	_, err := q.db.ExecContext(ctx, actualizarTurnoDatos,
		arg.IDTurno,
		arg.IDMedico,
		arg.IDPaciente,
		arg.Fecha,
		arg.Hora,
	)
	return err
}

const atenderTurno = `-- name: AtenderTurno :exec
UPDATE turnos
SET estado = 'atendido'
WHERE id_turno = $1
  AND estado = 'programado'
`

func (q *Queries) AtenderTurno(ctx context.Context, idTurno int32) error {
	_, err := q.db.ExecContext(ctx, atenderTurno, idTurno)
	return err
}

const cambiarEstadoTurno = `-- name: CambiarEstadoTurno :exec
UPDATE turnos
SET estado = $2
WHERE id_turno = $1
`

type CambiarEstadoTurnoParams struct {
	IDTurno int32  `json:"id_turno"`
	Estado  string `json:"estado"`
}

func (q *Queries) CambiarEstadoTurno(ctx context.Context, arg CambiarEstadoTurnoParams) error {
	_, err := q.db.ExecContext(ctx, cambiarEstadoTurno, arg.IDTurno, arg.Estado)
	return err
}

const cancelarTurno = `-- name: CancelarTurno :exec
UPDATE turnos
SET estado = 'cancelado'
WHERE id_turno = $1
  AND estado <> 'cancelado'
`

func (q *Queries) CancelarTurno(ctx context.Context, idTurno int32) error {
	_, err := q.db.ExecContext(ctx, cancelarTurno, idTurno)
	return err
}

const crearTurno = `-- name: CrearTurno :one
INSERT INTO turnos (id_medico, id_paciente, fecha, hora)
VALUES ($1, $2, $3, $4)
RETURNING id_turno, id_medico, id_paciente, estado, fecha, hora
`

type CrearTurnoParams struct {
	IDMedico   int32     `json:"id_medico"`
	IDPaciente int32     `json:"id_paciente"`
	Fecha      time.Time `json:"fecha"`
	Hora       time.Time `json:"hora"`
}

func (q *Queries) CrearTurno(ctx context.Context, arg CrearTurnoParams) (Turno, error) {
	row := q.db.QueryRowContext(ctx, crearTurno,
		arg.IDMedico,
		arg.IDPaciente,
		arg.Fecha,
		arg.Hora,
	)
	var i Turno
	err := row.Scan(
		&i.IDTurno,
		&i.IDMedico,
		&i.IDPaciente,
		&i.Estado,
		&i.Fecha,
		&i.Hora,
	)
	return i, err
}

const obtenerHistorialTurnosDePaciente = `-- name: ObtenerHistorialTurnosDePaciente :many
SELECT id_turno, id_medico, id_paciente, estado, fecha, hora
FROM turnos
WHERE id_paciente = $1
ORDER BY fecha DESC, hora DESC
`

func (q *Queries) ObtenerHistorialTurnosDePaciente(ctx context.Context, idPaciente int32) ([]Turno, error) {
	rows, err := q.db.QueryContext(ctx, obtenerHistorialTurnosDePaciente, idPaciente)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turno
	for rows.Next() {
		var i Turno
		if err := rows.Scan(
			&i.IDTurno,
			&i.IDMedico,
			&i.IDPaciente,
			&i.Estado,
			&i.Fecha,
			&i.Hora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerHistorialTurnosPorMedico = `-- name: ObtenerHistorialTurnosPorMedico :many
SELECT id_turno, id_medico, id_paciente, estado, fecha, hora
FROM turnos
WHERE id_medico = $1
ORDER BY fecha DESC, hora DESC
`

func (q *Queries) ObtenerHistorialTurnosPorMedico(ctx context.Context, idMedico int32) ([]Turno, error) {
	rows, err := q.db.QueryContext(ctx, obtenerHistorialTurnosPorMedico, idMedico)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turno
	for rows.Next() {
		var i Turno
		if err := rows.Scan(
			&i.IDTurno,
			&i.IDMedico,
			&i.IDPaciente,
			&i.Estado,
			&i.Fecha,
			&i.Hora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerListaTurnosDePaciente = `-- name: ObtenerListaTurnosDePaciente :many
SELECT id_turno, id_medico, id_paciente, estado, fecha, hora
FROM turnos
WHERE id_paciente = $1
  AND estado = 'programado'
  AND (fecha > CURRENT_DATE OR (fecha = CURRENT_DATE AND hora >= CURRENT_TIME))
ORDER BY fecha, hora
`

func (q *Queries) ObtenerListaTurnosDePaciente(ctx context.Context, idPaciente int32) ([]Turno, error) {
	rows, err := q.db.QueryContext(ctx, obtenerListaTurnosDePaciente, idPaciente)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turno
	for rows.Next() {
		var i Turno
		if err := rows.Scan(
			&i.IDTurno,
			&i.IDMedico,
			&i.IDPaciente,
			&i.Estado,
			&i.Fecha,
			&i.Hora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerListaTurnosPorMedico = `-- name: ObtenerListaTurnosPorMedico :many
SELECT id_turno, id_medico, id_paciente, estado, fecha, hora
FROM turnos
WHERE id_medico = $1
  AND estado = 'programado'
  AND (fecha > CURRENT_DATE OR (fecha = CURRENT_DATE AND hora >= CURRENT_TIME))
ORDER BY fecha, hora
`

func (q *Queries) ObtenerListaTurnosPorMedico(ctx context.Context, idMedico int32) ([]Turno, error) {
	rows, err := q.db.QueryContext(ctx, obtenerListaTurnosPorMedico, idMedico)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turno
	for rows.Next() {
		var i Turno
		if err := rows.Scan(
			&i.IDTurno,
			&i.IDMedico,
			&i.IDPaciente,
			&i.Estado,
			&i.Fecha,
			&i.Hora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerTurnoPorId = `-- name: ObtenerTurnoPorId :one
SELECT id_turno, id_medico, id_paciente, estado, fecha, hora
FROM turnos
WHERE id_turno = $1
`

func (q *Queries) ObtenerTurnoPorId(ctx context.Context, idTurno int32) (Turno, error) {
	row := q.db.QueryRowContext(ctx, obtenerTurnoPorId, idTurno)
	var i Turno
	err := row.Scan(
		&i.IDTurno,
		&i.IDMedico,
		&i.IDPaciente,
		&i.Estado,
		&i.Fecha,
		&i.Hora,
	)
	return i, err
}
