// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pacientes.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const actualizarPaciente = `-- name: ActualizarPaciente :exec
UPDATE pacientes
SET obra_social = $2, nro_afiliado = $3
WHERE id_paciente = $1
`

type ActualizarPacienteParams struct {
	IDPaciente  int32          `json:"id_paciente"`
	ObraSocial  sql.NullString `json:"obra_social"`
	NroAfiliado sql.NullString `json:"nro_afiliado"`
}

func (q *Queries) ActualizarPaciente(ctx context.Context, arg ActualizarPacienteParams) error {
	_, err := q.db.ExecContext(ctx, actualizarPaciente, arg.IDPaciente, arg.ObraSocial, arg.NroAfiliado)
	return err
}

const crearPaciente = `-- name: CrearPaciente :one
INSERT INTO pacientes (id_paciente, obra_social, nro_afiliado)
VALUES ($1, $2, $3)
RETURNING obra_social, nro_afiliado
`

type CrearPacienteParams struct {
	IDPaciente  int32          `json:"id_paciente"`
	ObraSocial  sql.NullString `json:"obra_social"`
	NroAfiliado sql.NullString `json:"nro_afiliado"`
}

type CrearPacienteRow struct {
	ObraSocial  sql.NullString `json:"obra_social"`
	NroAfiliado sql.NullString `json:"nro_afiliado"`
}

func (q *Queries) CrearPaciente(ctx context.Context, arg CrearPacienteParams) (CrearPacienteRow, error) {
	row := q.db.QueryRowContext(ctx, crearPaciente, arg.IDPaciente, arg.ObraSocial, arg.NroAfiliado)
	var i CrearPacienteRow
	err := row.Scan(&i.ObraSocial, &i.NroAfiliado)
	return i, err
}

const eliminarPaciente = `-- name: EliminarPaciente :execrows
DELETE FROM pacientes
WHERE id_paciente = $1
`

func (q *Queries) EliminarPaciente(ctx context.Context, idPaciente int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, eliminarPaciente, idPaciente)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listarPacientes = `-- name: ListarPacientes :many
SELECT u.id, u.DNI, u.nombre, u.apellido, u.sexo, u.fecha_nacimiento, u.email, u.telefono, p.obra_social, p.nro_afiliado
FROM usuarios u JOIN pacientes p ON p.id_paciente = u.id
ORDER BY u.apellido, u.nombre
`

type ListarPacientesRow struct {
	ID              int32          `json:"id"`
	Dni             string         `json:"dni"`
	Nombre          string         `json:"nombre"`
	Apellido        string         `json:"apellido"`
	Sexo            string         `json:"sexo"`
	FechaNacimiento time.Time      `json:"fecha_nacimiento"`
	Email           string         `json:"email"`
	Telefono        string         `json:"telefono"`
	ObraSocial      sql.NullString `json:"obra_social"`
	NroAfiliado     sql.NullString `json:"nro_afiliado"`
}

func (q *Queries) ListarPacientes(ctx context.Context) ([]ListarPacientesRow, error) {
	rows, err := q.db.QueryContext(ctx, listarPacientes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListarPacientesRow
	for rows.Next() {
		var i ListarPacientesRow
		if err := rows.Scan(
			&i.ID,
			&i.Dni,
			&i.Nombre,
			&i.Apellido,
			&i.Sexo,
			&i.FechaNacimiento,
			&i.Email,
			&i.Telefono,
			&i.ObraSocial,
			&i.NroAfiliado,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerPaciente = `-- name: ObtenerPaciente :one
SELECT u.id, u.DNI, u.nombre, u.apellido, u.sexo, u.fecha_nacimiento, u.email, u.telefono, p.obra_social, p.nro_afiliado
FROM usuarios u JOIN pacientes p ON p.id_paciente = u.id
WHERE id_paciente = $1
`

type ObtenerPacienteRow struct {
	ID              int32          `json:"id"`
	Dni             string         `json:"dni"`
	Nombre          string         `json:"nombre"`
	Apellido        string         `json:"apellido"`
	Sexo            string         `json:"sexo"`
	FechaNacimiento time.Time      `json:"fecha_nacimiento"`
	Email           string         `json:"email"`
	Telefono        string         `json:"telefono"`
	ObraSocial      sql.NullString `json:"obra_social"`
	NroAfiliado     sql.NullString `json:"nro_afiliado"`
}

func (q *Queries) ObtenerPaciente(ctx context.Context, idPaciente int32) (ObtenerPacienteRow, error) {
	row := q.db.QueryRowContext(ctx, obtenerPaciente, idPaciente)
	var i ObtenerPacienteRow
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Apellido,
		&i.Sexo,
		&i.FechaNacimiento,
		&i.Email,
		&i.Telefono,
		&i.ObraSocial,
		&i.NroAfiliado,
	)
	return i, err
}
