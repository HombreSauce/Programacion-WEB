// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: atiende_por.sql

package db

import (
	"context"
)

const actualizarObraSocialDeMedico = `-- name: ActualizarObraSocialDeMedico :exec
UPDATE atiende_por
SET obra_social_nombre = $2
WHERE id_medico = $1
  AND obra_social_nombre = $3
`

type ActualizarObraSocialDeMedicoParams struct {
	IDMedico           int32  `json:"id_medico"`
	ObraSocialNombre   string `json:"obra_social_nombre"`
	ObraSocialNombre_2 string `json:"obra_social_nombre_2"`
}

func (q *Queries) ActualizarObraSocialDeMedico(ctx context.Context, arg ActualizarObraSocialDeMedicoParams) error {
	_, err := q.db.ExecContext(ctx, actualizarObraSocialDeMedico, arg.IDMedico, arg.ObraSocialNombre, arg.ObraSocialNombre_2)
	return err
}

const crearRelacionMedicoObra = `-- name: CrearRelacionMedicoObra :one
INSERT INTO atiende_por (id_medico, obra_social_nombre)
VALUES ($1, $2)
RETURNING id_medico, obra_social_nombre
`

type CrearRelacionMedicoObraParams struct {
	IDMedico         int32  `json:"id_medico"`
	ObraSocialNombre string `json:"obra_social_nombre"`
}

func (q *Queries) CrearRelacionMedicoObra(ctx context.Context, arg CrearRelacionMedicoObraParams) (AtiendePor, error) {
	row := q.db.QueryRowContext(ctx, crearRelacionMedicoObra, arg.IDMedico, arg.ObraSocialNombre)
	var i AtiendePor
	err := row.Scan(&i.IDMedico, &i.ObraSocialNombre)
	return i, err
}

const eliminarRelacionMedicoObra = `-- name: EliminarRelacionMedicoObra :execrows
DELETE FROM atiende_por
WHERE id_medico = $1
  AND obra_social_nombre = $2
`

type EliminarRelacionMedicoObraParams struct {
	IDMedico         int32  `json:"id_medico"`
	ObraSocialNombre string `json:"obra_social_nombre"`
}

func (q *Queries) EliminarRelacionMedicoObra(ctx context.Context, arg EliminarRelacionMedicoObraParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, eliminarRelacionMedicoObra, arg.IDMedico, arg.ObraSocialNombre)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listarMedicosPorObra = `-- name: ListarMedicosPorObra :many
SELECT m.id_medico, u.DNI, u.nombre, u.apellido, m.nro_matricula, m.especialidad
FROM atiende_por ap
JOIN medicos m ON m.id_medico = ap.id_medico
JOIN usuarios u ON u.id = m.id_medico
WHERE ap.obra_social_nombre = $1
ORDER BY u.apellido, u.nombre
`

type ListarMedicosPorObraRow struct {
	IDMedico     int32  `json:"id_medico"`
	Dni          string `json:"dni"`
	Nombre       string `json:"nombre"`
	Apellido     string `json:"apellido"`
	NroMatricula int32  `json:"nro_matricula"`
	Especialidad string `json:"especialidad"`
}

func (q *Queries) ListarMedicosPorObra(ctx context.Context, obraSocialNombre string) ([]ListarMedicosPorObraRow, error) {
	rows, err := q.db.QueryContext(ctx, listarMedicosPorObra, obraSocialNombre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListarMedicosPorObraRow
	for rows.Next() {
		var i ListarMedicosPorObraRow
		if err := rows.Scan(
			&i.IDMedico,
			&i.Dni,
			&i.Nombre,
			&i.Apellido,
			&i.NroMatricula,
			&i.Especialidad,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listarObrasPorMedico = `-- name: ListarObrasPorMedico :many
SELECT ap.obra_social_nombre
FROM atiende_por ap
WHERE ap.id_medico = $1
ORDER BY ap.obra_social_nombre
`

func (q *Queries) ListarObrasPorMedico(ctx context.Context, idMedico int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listarObrasPorMedico, idMedico)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var obra_social_nombre string
		if err := rows.Scan(&obra_social_nombre); err != nil {
			return nil, err
		}
		items = append(items, obra_social_nombre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
